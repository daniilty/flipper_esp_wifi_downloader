#include "furi_hal.h"
#include <furi.h>
#include <gui/gui.h>
#include <gui/icon_i.h>
#include <gui/view_dispatcher.h>
#include <gui/scene_manager.h>
#include <gui/modules/submenu.h>
#include <gui/modules/popup.h>
#include <gui/modules/text_input.h>
#include <gui/modules/variable_item_list.h>
#include <storage/storage.h>

#define CMD_LEN 3
#define TAG "esp-wifi-downloader"
#define BAUDRATE (76800)
#define UART_BUFFER_SIZE 128
#define ESP_WIFI_DOWNLOADER_TEXT_INPUT_STORE_SIZE (63)
#define CFG_FILE_SIZE (ESP_WIFI_DOWNLOADER_TEXT_INPUT_STORE_SIZE * 2 + 2)
#define CONFIG_ITEMS (2)
#define APP_FOLDER "esp_wifi_downloader"
#define DOWNLOADER_DATA_DOWNLOADS(path) STORAGE_APP_DATA_PATH_PREFIX "/downloads/" path

#define TRANSFER_BEGIN "BGN"
#define TRANSFER_END "FIN"
#define FILE_PART "PRT"
#define ACK "ACK"
#define WIFI_INFO "WIF"
#define WL_NO_SSID_AVAIL "ENS"
#define WL_CONNECT_FAILED "ECF"
#define WL_CONNECTION_LOST "ECL"
#define WL_NO_SHIELD "ESH"

/* generated by fbt from .png files in images folder */
#include <esp_wifi_downloader_icons.h>

/** ids for all scenes used by the app */
typedef enum {
    ESPWifiDownloaderScene_MainMenu,
    ESPWifiDownloaderScene_Config,
    ESPWifiDownloaderScene_TextInput,
    ESPWifiDownloaderScene_SecondPopup,
    ESPWifiDownloaderScene_count,
} ESPWifiDownloaderScene;

typedef enum {
    WorkerEvtStop = (1 << 0),
    WorkerEvtRxDone = (1 << 1),
} WorkerEvtFlags;

#define WORKER_ALL_RX_EVENTS (WorkerEvtStop | WorkerEvtRxDone)

/** ids for the 2 types of view used by the app */
typedef enum {
    ESPWifiDownloaderView_Menu,
    ESPWifiDownloaderView_Popup,
    ESPWifiDownloaderView_TextInput,
    ESPWifiDownloaderView_VarItemList,
} ESPWifiDownloaderView;

/** ids for the 2 types of view used by the app */
typedef enum {
    DataEventCmd,
    DataEventSum,
    DataEventWiFiConnInfoSize,
    DataEventFileNameSize,
    DataEventFileName,
    DataEventWiFiConnInfo,
    DataEventFilePartSize,
    DataEventFilePart,
} DataEvent;

/** the app context struct */
typedef struct {
    SceneManager* scene_manager;
    ViewDispatcher* view_dispatcher;
    Submenu* menu;
    Popup* popup;
    TextInput* text_input;
    VariableItemList* var_item_list;
    uint32_t selected_var;
    char text_input_store[ESP_WIFI_DOWNLOADER_TEXT_INPUT_STORE_SIZE + 1];
    char ssid[ESP_WIFI_DOWNLOADER_TEXT_INPUT_STORE_SIZE];
    char password[ESP_WIFI_DOWNLOADER_TEXT_INPUT_STORE_SIZE];
    char cfg_file_buf[CFG_FILE_SIZE];
    FuriThread* rx_thread;
    FuriStreamBuffer* rx_stream;
    FuriString* popup_text;
    FuriString* fpath;
    uint8_t rx_buf[UART_BUFFER_SIZE + 1];
    FuriHalSerialHandle* serial_handle;
    bool rx_init;
    uint8_t uart_ch;
    uint8_t recv_bytes;
    uint8_t expect_bytes;
    DataEvent expect_event;
} ESPWifiDownloader;

/** all custom events */
typedef enum {
    ESPWifiDownloaderEvent_ShowConfig,
    ESPWifiDownloaderEvent_ShowPopupTwo
} ESPWifiDownloaderEvent;

/** all custom events */
typedef enum {
    CMDPopupTextEvent_Update,
} CMDPopupTextEvent;

/* main menu scene */

/** indices for menu items */
typedef enum {
    ESPWifiDownloaderMenuSelection_One,
    ESPWifiDownloaderMenuSelection_Two
} ESPWifiDownloaderMenuSelection;